import { assert } from './UnitTest.js'
import { int8, int16, int32, int64, uint8, uint16, uint32, uint64, float32, float64 } from '../src/index.js'
import { rawDef, isStruct, isVector } from '../src/symbols.js'
import sizeof from '../src/sizeof.js'

/*console.log('uint32.rawDef', uint32[rawDef])
console.log('uint32.isStruct', uint32[isStruct])
console.log('uint32.isVector', uint32[isVector])
console.log('uint32[10].rawDef', uint32[10][rawDef])
console.log('uint32[10][4]', uint32[10][4])
console.log('sizeof(uint32)', sizeof(uint32))
console.log('sizeof(uint32[10])', sizeof(uint32[10]))
console.log('sizeof(uint32[10][4])', sizeof(uint32[10][4]))
console.log('sizeof(uint32.withLength(f))', sizeof(uint32.withLength(s => s.numItems)))
console.log('sizeof(uint32.withLength(5))', sizeof(uint32.withLength(5)))
console.log('sizeof(uint32.readWhile(f))', sizeof(uint32.readWhile(x => x !== 0)))
console.log('uint32[10].rawDef', uint32[10][rawDef])
console.log('uint32[10].withDecoder(f).rawDef', uint32[10].withDecoder(x => x)[rawDef])*/

export function public_sizeof() {

    assert(sizeof(int8), 1, 'A01')
    assert(sizeof(int16), 2, 'A02')
    assert(sizeof(int32), 4, 'A03')
    assert(sizeof(int64), 8, 'A04')
    assert(sizeof(uint8), 1, 'A05')
    assert(sizeof(uint16), 2, 'A06')
    assert(sizeof(uint32), 4, 'A07')
    assert(sizeof(uint64), 8, 'A08')
    assert(sizeof(float32), 4, 'A09')
    assert(sizeof(float64), 8, 'A10')

    assert(sizeof(int8[10]), 1*10, 'B01')
    assert(sizeof(int16[10]), 2*10, 'B02')
    assert(sizeof(int32[10]), 4*10, 'B03')
    assert(sizeof(int64[10]), 8*10, 'B04')
    assert(sizeof(uint8[10]), 1*10, 'B05')
    assert(sizeof(uint16[10]), 2*10, 'B06')
    assert(sizeof(uint32[10]), 4*10, 'B07')
    assert(sizeof(uint64[10]), 8*10, 'B08')
    assert(sizeof(float32[10]), 4*10, 'B09')
    assert(sizeof(float64[10]), 8*10, 'B10')

    assert(sizeof(int8[10][20]), 1*10*20, 'C01')
    assert(sizeof(int16[10][20]), 2*10*20, 'C02')
    assert(sizeof(int32[10][20]), 4*10*20, 'C03')
    assert(sizeof(int64[10][20]), 8*10*20, 'C04')
    assert(sizeof(uint8[10][20]), 1*10*20, 'C05')
    assert(sizeof(uint16[10][20]), 2*10*20, 'C06')
    assert(sizeof(uint32[10][20]), 4*10*20, 'C07')
    assert(sizeof(uint64[10][20]), 8*10*20, 'C08')
    assert(sizeof(float32[10][20]), 4*10*20, 'C09')
    assert(sizeof(float64[10][20]), 8*10*20, 'C10')

    assert(sizeof(int8.withLength(5)), 1*5, 'D01')
    assert(sizeof(int16.withLength(5)), 2*5, 'D02')
    assert(sizeof(int32.withLength(5)), 4*5, 'D03')
    assert(sizeof(int64.withLength(5)), 8*5, 'D04')
    assert(sizeof(uint8.withLength(5)), 1*5, 'D05')
    assert(sizeof(uint16.withLength(5)), 2*5, 'D06')
    assert(sizeof(uint32.withLength(5)), 4*5, 'D07')
    assert(sizeof(uint64.withLength(5)), 8*5, 'D08')
    assert(sizeof(float32.withLength(5)), 4*5, 'D09')
    assert(sizeof(float64.withLength(5)), 8*5, 'D10')

    assert(sizeof(int8.withLength(s => s.numItems)), undefined, 'E01')
    assert(sizeof(int16.withLength(s => s.numItems)), undefined, 'E02')
    assert(sizeof(int32.withLength(s => s.numItems)), undefined, 'E03')
    assert(sizeof(int64.withLength(s => s.numItems)), undefined, 'E04')
    assert(sizeof(uint8.withLength(s => s.numItems)), undefined, 'E05')
    assert(sizeof(uint16.withLength(s => s.numItems)), undefined, 'E06')
    assert(sizeof(uint32.withLength(s => s.numItems)), undefined, 'E07')
    assert(sizeof(uint64.withLength(s => s.numItems)), undefined, 'E08')
    assert(sizeof(float32.withLength(s => s.numItems)), undefined, 'E09')
    assert(sizeof(float64.withLength(s => s.numItems)), undefined, 'E10')

    assert(sizeof(int8.readWhile(x => x !== 0)), undefined, 'F01')
    assert(sizeof(int16.readWhile(x => x !== 0)), undefined, 'F02')
    assert(sizeof(int32.readWhile(x => x !== 0)), undefined, 'F03')
    assert(sizeof(int64.readWhile(x => x !== 0)), undefined, 'F04')
    assert(sizeof(uint8.readWhile(x => x !== 0)), undefined, 'F05')
    assert(sizeof(uint16.readWhile(x => x !== 0)), undefined, 'F06')
    assert(sizeof(uint32.readWhile(x => x !== 0)), undefined, 'F07')
    assert(sizeof(uint64.readWhile(x => x !== 0)), undefined, 'F08')
    assert(sizeof(float32.readWhile(x => x !== 0)), undefined, 'F09')
    assert(sizeof(float64.readWhile(x => x !== 0)), undefined, 'F10')

    // TODO
    // assert(sizeof(int8[10].withEncoder(x => x)), undefined, 'G01')
    // assert(sizeof(int16[10].withEncoder(x => x)), undefined, 'G02')
    // assert(sizeof(int32[10].withEncoder(x => x)), undefined, 'G03')
    // assert(sizeof(int64[10].withEncoder(x => x)), undefined, 'G04')
    // assert(sizeof(uint8[10].withEncoder(x => x)), undefined, 'G05')
    // assert(sizeof(uint16[10].withEncoder(x => x)), undefined, 'G06')
    // assert(sizeof(uint32[10].withEncoder(x => x)), undefined, 'G07')
    // assert(sizeof(uint64[10].withEncoder(x => x)), undefined, 'G08')
    // assert(sizeof(float32[10].withEncoder(x => x)), undefined, 'G09')
    // assert(sizeof(float64[10].withEncoder(x => x)), undefined, 'G10')
}
